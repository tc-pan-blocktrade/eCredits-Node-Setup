pool:
  vmImage: ubuntu-latest

variables:
  - name: VPS_TARGET_FILE
    value: 'vps_targets.txt'

steps:
  - task: DownloadSecureFile@1
    name: DownloadSSHKey
    inputs:
      secureFile: id_rsa

  - checkout: self

  - task: Bash@3
    displayName: 'Write SSH Key to Agent'
    inputs:
      targetType: 'inline'
      script: |
        set -e
        mkdir -p ~/.ssh
        cp "$(DownloadSSHKey.secureFilePath)" ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        printf 'Host *\n  StrictHostKeyChecking no\n' > ~/.ssh/config

  - task: Bash@3
    displayName: 'Clone Node Setup Repo on All VPS Targets'
    inputs:
      targetType: 'inline'
      script: |
        set -e

        # --- locate and normalize VPS file ---
        TARGET_FILE="$(System.DefaultWorkingDirectory)/$(VPS_TARGET_FILE)"
        if [ ! -f "$TARGET_FILE" ]; then
          echo "‚ùå VPS target file not found: $TARGET_FILE"
          exit 1
        fi

        echo "üìã Cleaning VPS target file (remove CR / trailing whitespace)"
        sed -i 's/\r$//' "$TARGET_FILE" || true
        sed -i 's/[ \t]*$//' "$TARGET_FILE" || true

        # --- load VPS list into an array ---
        mapfile -t VPS_LIST < <(grep -Ev '^\s*#|^\s*$' "$TARGET_FILE")
        if [ "${#VPS_LIST[@]}" -eq 0 ]; then
          echo "‚ùå No valid VPS targets found in $TARGET_FILE"
          exit 1
        fi

        # --- process each VPS ---
        for entry in "${VPS_LIST[@]}"; do
          USER=$(printf '%s' "$entry" | awk '{print $1}')
          IP=$(printf '%s' "$entry" | awk '{print $2}')
          USER=$(printf '%s' "$USER" | tr -d '\r' | xargs)
          IP=$(printf '%s' "$IP" | tr -d '\r' | xargs)

          if [ -z "$USER" ] || [ -z "$IP" ]; then
            echo "‚ùå Malformed line in VPS file: '$entry'"
            exit 1
          fi

          echo "üñ•Ô∏è Connecting to $USER@$IP..."
          if ! ssh -o BatchMode=yes -o ConnectTimeout=15 "$USER@$IP" 'hostname >/dev/null 2>&1'; then
            echo "‚ùå ERROR: Failed to connect to $USER@$IP ‚Äì exiting pipeline."
            exit 1
          fi

          echo "üì¶ Deploying eCredits Node Setup on $IP..."

          ssh "$USER@$IP" bash -s <<'REMOTE_EOF'
            set -e
            cd "$HOME" || exit 1

            if [ -d "node-setup-current" ]; then
              cd node-setup-current || exit 1
              git fetch origin
              git checkout main
              git reset --hard origin/main
            else
              git clone -b main https://github.com/tc-pan-blocktrade/eCredits-Node-Setup node-setup-current
              chmod +x node-setup-current/full_nodes/*
              chmod +x node-setup-current/eth2_scripts/*
              cd node-setup-current
            fi

            echo "‚úÖ Repo synced at $(pwd)"
        REMOTE_EOF

          ssh_status=$?
          if [ $ssh_status -ne 0 ]; then
            echo "‚ùå SSH provisioning failed for $USER@$IP (exit $ssh_status) ‚Äì exiting pipeline."
            exit 1
          fi

          echo "‚úÖ Completed setup for $USER@$IP"
        done
